/*
 * Use jodo sensor to turn on RGB_LED and 7segment.
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/mman.h>
#include <linux/i2c-dev.h>
#include <sys/ioctl.h>
#include <wiringPi.h>
#include"gpiolib.c"

#define LED_B 15
#define LED_G 16
#define LED_R 1

#define BH1750_ADDR 0x23 // Replace with the actual I2C address of the sensor

#define LED_NUM 8

int gpPin[]= {26, 16, 20, 19, 13, 6, 5, 21};
//			   A,  B,  C,  D,  E, F, G, DP	

int digitNum[10][8] = {
	{1, 1, 1, 1, 1, 1, 0, 0}, // 0
	{0, 1, 1, 0, 0, 0, 0, 0}, // 1
	{1, 1, 0, 1, 1, 0, 1, 0}, // 2
	{1, 1, 1, 1, 0, 0, 1, 0}, // 3
	{0, 1, 1, 0, 0, 1, 1, 0}, // 4
	{1, 0, 1, 1, 0, 1, 1, 0}, // 5
	{1, 0, 1, 1, 1, 1, 1, 0}, // 6
	{1, 1, 1, 0, 0, 1, 0, 0}, // 7
	{1, 1, 1, 1, 1, 1, 1, 0}, // 8
	{1, 1, 1, 1, 0, 1, 1, 0}  // 9
};

void displayNum(int num)
{
	int i;
	for(i=0; i<LED_NUM; i++){
		gpioWrite(gpPin[i], digitNum[num][i]);
	}
	usleep(100);
}

int main()
{
    int fd;
    int luxRaw;
	float lux;
    unsigned char buf[3] = {0};
    char key;
    
    for(int i=0; i<LED_NUM; i++){
		gpioExport(gpPin[i]);
		gpioDirection(gpPin[i], 1);
	}

    if ((fd = open("/dev/i2c-1", O_RDWR)) < 0) { // Open the I2C device file
        perror("open");
        exit(1);
    }

    if (ioctl(fd, I2C_SLAVE, BH1750_ADDR) < 0) { // Set the I2C slave address
        perror("ioctl");
        exit(1);
    }

    // Send measurement request to the sensor
    //buf[0] = 0x01; // Power On
    //buf[0] = 0x07; // Reset
    for(;;)
    {
		buf[0] = 0x23; // One time L-Resolution measurement

		if (write(fd, buf, 1) != 1) {
			perror("write");
			exit(1);
		}
    
		// Wait for measurement to be ready (typically takes 120ms)
		usleep(120000);
		
		// Read the measurement value from the sensor
		if (read(fd, buf, 2) != 2) {
			perror("read");
			exit(1); }

		if(wiringPiSetup() == -1){
			printf("Err:wiringPiSetup!!\n");
			return -1; }

		pinMode(LED_R, OUTPUT);
		pinMode(LED_G, OUTPUT);
		pinMode(LED_B, OUTPUT);
	
		// Convert the measurement value to lux
		luxRaw = (buf[0] << 8) | buf[1];
		lux = (float)luxRaw / 1.2; // Divide by 1.2 to get the actual lux value
		
		if(luxRaw >= 0 && luxRaw <100){
			printf("Lux: %d(%7.3f) :: %x, %x\n", luxRaw, lux, buf[0], buf[1]);
			printf("RED!\n");
			digitalWrite(LED_R, HIGH);
			digitalWrite(LED_G, LOW);
			digitalWrite(LED_B, LOW);
			delay(500);
		}
		else if(luxRaw >= 100 && luxRaw < 200){
			printf("Lux: %d(%7.3f) :: %x, %x\n", luxRaw, lux, buf[0], buf[1]);
			printf("GREEN!\n");
			digitalWrite(LED_R, LOW);
			digitalWrite(LED_G, HIGH);
			digitalWrite(LED_B, LOW);
			delay(500);
		}
		else if(luxRaw >= 200){
			printf("Lux: %d(%7.3f) :: %x, %x\n", luxRaw, lux, buf[0], buf[1]);
			printf("BLUE!\n");
			digitalWrite(LED_R, LOW);
			digitalWrite(LED_G, LOW);
			digitalWrite(LED_B, HIGH);
			delay(500);
		}		
		
		if(luxRaw < 20) displayNum(0);
		else if(luxRaw >= 20 && luxRaw < 40) displayNum(1);
		else if(luxRaw >= 40 && luxRaw < 60) displayNum(2);
		else if(luxRaw >= 60 && luxRaw < 80) displayNum(3);
		else if(luxRaw >= 80 && luxRaw < 100) displayNum(4);
		else if(luxRaw >= 100 && luxRaw < 120) displayNum(5);
		else if(luxRaw >= 120 && luxRaw < 140) displayNum(6);
		else if(luxRaw >= 140 && luxRaw < 160) displayNum(7);
		else if(luxRaw >= 160 && luxRaw < 180) displayNum(8);
		else if(luxRaw >= 180) displayNum(9);
	}

    close(fd);

    return 0;
}
